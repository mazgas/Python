'''Project instructions
Which NYC schools have the best math results?

    The best math results are at least 80% of the *maximum possible score of 800* for math.
    Save your results in a pandas DataFrame called best_math_schools, including "school_name" and "average_math" columns, sorted by "average_math" in descending order.

What are the top 10 performing schools based on the combined SAT scores?

    Save your results as a pandas DataFrame called top_10_schools containing the "school_name" and a new column named "total_SAT", with results ordered by "total_SAT" in descending order ("total_SAT" being the sum of math, reading, and writing scores).

Which single borough has the largest standard deviation in the combined SAT score?

    Save your results as a pandas DataFrame called largest_std_dev.
    The DataFrame should contain one row, with:
        "borough" - the name of the NYC borough with the largest standard deviation of "total_SAT".
        "num_schools" - the number of schools in the borough.
        "average_SAT" - the mean of "total_SAT".
        "std_SAT" - the standard deviation of "total_SAT".
    Round all numeric values to two decimal places.'''

# Re-run this cell 
import pandas as pd

# Read in the data
schools = pd.read_csv("schools.csv")

# Preview the data
schools.head()

nyc_schools = pd.DataFrame(schools)
best_math_schools = nyc_schools[nyc_schools['average_math'] >= 0.8 * 800][['school_name', 'average_math']]
best_math_schools = best_math_schools.sort_values('average_math', ascending=False)
print(best_math_schools)

nyc_schools['total_SAT'] = nyc_schools[['average_math', 'average_reading', 'average_writing']].sum(axis = 1)
#print(nyc_schools)
top_10_schools = nyc_schools[['school_name', 'total_SAT']].sort_values('total_SAT', ascending = False).head(10)
print(top_10_schools)

import numpy as np
largest_std_dev = pd.DataFrame(nyc_schools.groupby('borough')['total_SAT'].agg(['size', np.mean, np.std]))
largest_std_dev = largest_std_dev.rename(columns={'size': 'num_schools', 'mean': 'average_SAT', 'std' : 'std_SAT'})
largest_std_dev = largest_std_dev.round(2)
largest_std_dev = largest_std_dev.loc[[largest_std_dev['std_SAT'].idxmax()]]
print(largest_std_dev)
